""" # Домашнее задание
# Таблица умножения

# ● Условие
# На вход подается число n.

# ● Задача
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n. 
# Обоснуйте выбор парадигм.

# ● Пример вывода:

# 1 * 1 = 1
# 1 * 2 = 2
# 1 * 3 = 3
# 1 * 4 = 4
# 1 * 5 = 5
# 1 * 6 = 6
# ..
# 1 * 9 = 9 """

# 1. Поскольку мне не удалось найти библиотеку, в которой есть вывод таблицы умножения,
#    декларативная парадигма не будет использована.
# 2. Задача не предполагает работу с объектами, поэтому парадигма ООП тоже не подходит.
# 3. Использование структурной парадигмы усложнит написание, восприятие и, как следствие,
#    сопровождение кода (что в применении к задаче такой сложности звучит немного комично).
# Вывод:
#    на мой взгляд, наиболее подходящей для данной задачи является процедурная парадигма.
# Если же мы добавим структуру проверки правильности введённых данных,
# то в программе появятся элементы структурной парадигмы


def printExampleMul(a, b):
    print('%i * %i = %2d' % (a, b, a*b))


def printNumExamplesMul(num):
    for i in range(1, 10):
        printExampleMul(num, i)


def printOneToNumExamples(num):
    for i in range(1, num+1):
        printNumExamplesMul(i)
        print()


# Решение в процедурной парадигме:
# n = int(input('Введите натуральное число от 1 до 9: '))
# printOneToNumExamples(n)

# Добавим элементы структурной парадигмы:
toContinue = True
while toContinue == True:
    n = input('Введите натуральное число от 1 до 9: ')
    if n == "q" or n == "Q" or n == "й" or n == "Й":
        toContinue = False
    elif n.isdigit() and int(n) > 0 and int(n) < 10:
        n = int(n)
        printOneToNumExamples(n)
        toContinue = False
    else:
        print('Ошибка. Повторите ввод или введите q')
